//:CODING_STYLE:=============================================://
/** ******************************************************** ***
                                                     
    Namespaces:                                               
                                                            
        1. All global tokens begin with "MCV_".               
        2. All global tokens have a category namespace.       
            MCV_F : Function                                   
            MCV_D : Data (AKA: Variable)                       
            MCV_U : Unit Test                                  
            MCV_T : Type                                       
            MCV_M : Macro                                      
        3. Public  tokens are all   capital. EX: MCV_F_WHATEVER
        4. Private tokens are all lowercase. EX: mcv_f_whatever
        5. DONT MIX CAPITAL AND LOWERCASE: This_Is_Not_Allowed
          
*** ******************************************************** **/  
//:=============================================:CODING_STYLE://
//:INCLUDES:=================================================://

    #include "stdio.h"           //:fflush( stdout ) , printf://
    #include "stdint.h"          //:int32_t , uint32_t , etc ://
    #include "libloaderapi.h"  //:LoadLibraryA,GetProcAddress://
    #include <stdlib.h>                           //: exit() ://
                             
//:=================================================:INCLUDES://
//:FILE_MACROS:==============================================://

    #define I32  int32_t
    #define U32 uint32_t
    #define VOD void
    #define DLL void
    #define CHR const char
    #define ERR mcv_f_err

//:==============================================:FILE_MACROS://
//:DATA:=====================================================://

    //:DLL:--------------------------------------------------://

        DLL* mcv_d_dll_vul = ((DLL*)0);

    //:--------------------------------------------------:DLL://

//:=====================================================:DATA://
//:FUNCTIONS:================================================://

    VOD  mcv_f_err( CHR* msg ){

        printf( "[mcv_f_err]:%s" , msg );
        fflush( stdout );
        exit( 0xFF );
    }

    DLL* mcv_f_dll_get( CHR* nam ){

        DLL* dll = LoadLibraryA( nam );
        if( ((DLL*)0) == dll ){
            ERR( "[FAILED_TO_LOAD_DLL]" );
        };;
        return( dll );
    }

    DLL* mcv_f_dll_all( VOD ){

        mcv_d_dll_vul = mcv_f_dll_get( "vulkan-1.dll" );

    }

    VOD  MCV_F_INI( VOD ){              //:Initialize Library://

        mcv_f_dll_all( );               //:Load_All_Libraries://

        printf("[todo:code_here_for_init]\n");

    }

    I32  MCV_F_DEM( VOD ){           //:Library_Demonstration://

        MCV_F_INI( );

        return( 0 );
    }

//:================================================:FUNCTIONS://
//:FILE_MACROS:==============================================://

    #undef  I32  
    #undef  U32  
    #undef  VOD 
    #undef  DLL
    #undef  CHR

//:==============================================:FILE_MACROS://

