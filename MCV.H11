//:CODING_STYLE:=============================================://
/** ******************************************************** ***
                                                     
    Namespaces:                                               
                                                            
        1. All global tokens begin with "MCV_".               
        2. All global tokens have a category namespace.       
            MCV_F : Function                                   
            MCV_D : Data (AKA: Variable)                       
            MCV_U : Unit Test                                  
            MCV_T : Type                                       
            MCV_M : Macro                                      
        3. Public  tokens are all   capital. EX: MCV_F_WHATEVER
        4. Private tokens are all lowercase. EX: mcv_f_whatever
        5. DONT MIX CAPITAL AND LOWERCASE: This_Is_Not_Allowed
          
*** ******************************************************** **/  
//:=============================================:CODING_STYLE://
//:INCLUDES:=================================================://

    #include "stdio.h"           //:fflush( stdout ) , printf://
    #include "stdint.h"          //:int32_t , uint32_t , etc ://
    #include "libloaderapi.h"  //:LoadLibraryA,GetProcAddress://
    #include <stdlib.h>                           //: exit() ://
                             
//:=================================================:INCLUDES://
//:FILE_MACROS:==============================================://

    #define I32  int32_t
    #define U32 uint32_t
    #define VOD void
    #define DLL void
    #define CHR const char
    #define ERR mcv_f_err
    #define RES int32_t                      //:VkResult Type://
    #define FUN MCV_T_FUN                 //:Generic_Function://

//:==============================================:FILE_MACROS://
//:TYPES:====================================================://

    I32 ( MCV_T_FUN )(  );           //:Generic_Function_Type://

//:====================================================:TYPES://
//:TYPES_VULKAN:=============================================://

//:VkStructureType://

    //: typedef I32 MCV_T_VKSTRUCTURETYPE ;

//:VkInstanceCreateFlags://

    //: typedef U32 MCV_T_VKINSTANCECREATEFLAGS

//:VkApplicationInfo://

    struct MCV_T_VKAPPLICATIONINFO {
              I32                    sType;
        const VOD*                   pNext;
              CHR*        pApplicationName;
              U32       applicationVersion;
              CHR*             pEngineName;
              U32            engineVersion;
              U32               apiVersion;
    };

//:VkInstanceCreateInfo://

    struct MCV_T_VKINSTANCECREATEINFO {

        I32                                           sType;

        const void*                                   pNext;

        U32                                           flags;

        const struct MCT_T_VKAPPLICATIONINFO*     
                                           pApplicationInfo;

        uint32_t                          enabledLayerCount;

        const char* const*              ppEnabledLayerNames;

        uint32_t                      enabledExtensionCount;

        const char* const*          ppEnabledExtensionNames;
    };

//:VkAllocationCallbacks://
                
    /** typedef void MCV_T_VKALLOCATIONCALLBACKS **/      

//:VkInstance://
            
    /** typedef void MCV_T_VKINSTANCE **/                          

//:=============================================:TYPES_VULKAN://
//:DATA:=====================================================://

    //:DLL:--------------------------------------------------://

        DLL* mcv_d_dll_vul = ((DLL*)0);

    //:--------------------------------------------------:DLL://
    //:VULKAN_OBJECTS:---------------------------------------://
    #define ICI struct MCV_T_VKINSTANCECREATEINFO 
         
        ICI mcv_d_c_instance ={ 0 };
        VOD mcv_d_o_instance ={ 0 };

    #undef  ICI
    //:---------------------------------------:VULKAN_OBJECTS://

//:=====================================================:DATA://
//:FUNCTIONS_BASIC:==========================================://

    VOD  mcv_f_err( CHR* msg ){

        printf( "[mcv_f_err]:%s" , msg );
        fflush( stdout );
        exit( 0xFF );
    }

    FUN* mcv_f_gpa( DLL* dll , CHR* nam ){

        if( ((DLL*)0) == dll ){ ERR("[NIL:DLL]"); };
        if( ((CHR*)0) == nam ){ ERR("[NIL:NAM]"); };

        FUN* fun = GetProcAddress( dll , nam );
        if( ((FUN*)0) == fun ){
            ERR("[GPA_FAIL]:%s\n" , nam);
        };;
        return( fun );
    }

//:==========================================:FUNCTIONS_BASIC://
//:FUNCTIONS_VULKAN:=========================================://

//:vkCreateInstance://

    RES MCV_F_VKCREATEINSTANCE(
        const struct MCV_T_VKINSTANCECREATEINFO*                 
                                            pCreateInfo 
    ,   const VOD*                           pAllocator 
    ,   VOD*                                 pInstance
    ){
        FUN* fun =mcv_f_gpa( 
            mcv_d_dll_vul , "vkCreateInstance" );
        
        return( fun( pCreateInfo,pAllocator,pInstance ) );
    }

//:=========================================:FUNCTIONS_VULKAN://
//:FUNCTIONS:================================================://

    DLL* mcv_f_dll_get( CHR* nam ){

        DLL* dll = LoadLibraryA( nam );
        if( ((DLL*)0) == dll ){
            ERR( "[FAILED_TO_LOAD_DLL]" );
        };;
        return( dll );
    }

    DLL* mcv_f_dll_all( VOD ){

        mcv_d_dll_vul = mcv_f_dll_get( "vulkan-1.dll" );

    }

    VOD  MCV_F_INI( VOD ){              //:Initialize Library://

        mcv_f_dll_all( );               //:Load_All_Libraries://

        mcv_d_c_instance.xxxxxxxxxx = ( xxxxxxxxx );

        RES res = MCV_F_VKCREATEINSTANCE(
            &( mcv_d_c_instance )
        ,    (       0          )      //:AllocationCallbacks://          
        ,   &( mcv_d_o_instance )
        );;

        printf("[todo:code_here_for_init]\n");

    }

    I32  MCV_F_DEM( VOD ){           //:Library_Demonstration://

        MCV_F_INI( );

        return( 0 );
    }

//:================================================:FUNCTIONS://
//:FILE_MACROS:==============================================://

    #undef  I32  
    #undef  U32  
    #undef  VOD 
    #undef  DLL
    #undef  CHR
    #undef  RES
    #undef  FUN

//:==============================================:FILE_MACROS://

